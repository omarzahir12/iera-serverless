service: iera-app-serverless
frameworkVersion: '3'

provider:
  name: aws
  runtime: nodejs18.x
  region: ca-central-1
  stage: ${opt:stage, 'dev'}
  memorySize: 128
  environment:
    MONGO_URI: ${ssm:/mongo_db}
    SENGRID: ${ssm:/sendgrid}
    PRIVATE_KEY: ${ssm:/private_key}
    PUBLIC_KEY: ${ssm:/public_key}
    R2_ACCESS_ID: ${ssm:/r2_access_id}
    R2_ACCESS_SECRET: ${ssm:/r2_access_secret}
    MICROSOFT_ACCESS_TOKEN_ID: ${ssm:/microsoft_access_token_id}
    MICROSOFT_TENANT_ID: ${ssm:/microsoft_tenant_id}
    MICROSOFT_CLIENT_ID: ${ssm:/microsoft_client_id}
    MICROSOFT_CLIENT_SECRET: ${ssm:/microsoft_client_secret}
    MICROSOFT_SCOPE: ${ssm:/microsoft_scope}
    SHAREPOINT_STREET_DAWAH_SITE_ID: ${ssm:/sharepoint_street_dawah_site_id}
    SHAREPOINT_STREET_DAWAH_LIST_ID: ${ssm:/sharepoint_street_dawah_list_id}
    SHAREPOINT_NEW_MUSLIM_WEEKLY_TRACKER_SITE_ID: ${ssm:/sharepoint_new_muslim_weekly_tracker_site_id}
    SHAREPOINT_NEW_MUSLIM_WEEKLY_TRACKER_LIST_ID: ${ssm:/sharepoint_new_muslim_weekly_tracker_list_id}
    R2_ENDPOINT: https://b9068f786c3dc33c2c4b3cac9a1638cd.r2.cloudflarestorage.com
    R2_BUCKET: iera-canada-ids
  
functions:
  #open
  login:
    handler: src/users/login.handler
    events:
      - httpApi:
          path: /login
          method: post
  auth:
    handler: src/users/login.auth
    events:
      - httpApi:
          path: /auth
          method: get
  #open
  register:
    handler: src/users/create.handler
    events:
      - httpApi:
          path: /users
          method: post
  #secured, owner, lead, admin TODO
  getUsers:
    handler: src/users/get.handler
    events:
      - httpApi:
          path: /users
          method: get
  getNames:
    handler: src/users/get.names
    events:
      - httpApi:
          path: /users_names
          method: post
  getUser:
    handler: src/users/getUser.handler
    events:
      - httpApi:
          path: /users/{user_id}
          method: get
  getUserImage:
    handler: src/users/updateUser.getImage
    events:
      - httpApi:
          path: /users/{user_id}/ids/{image_id}
          method: get
  #secured, owner, lead, admin 
  updateUser:
    handler: src/users/updateUser.handler
    events:
      - httpApi:
          path: /users/{user_id}
          method: put
  #secured, owner
  createRequest:
    handler: src/requests/createRequest.handler
    events:
      - httpApi:
          path: /requests
          method: post
  
  #secured, admin 
  pendingRequests:
    handler: src/requests/getRequests.handler
    events:
      - httpApi:
          path: /requests
          method: get
  
  #secured, admin
  approveRequest:
    handler: src/requests/approveRequest.handler
    events:
      - httpApi:
          path: /requests/{request_id}
          method: put
  

  #secured, owner, lead, admin 
  getTeam:
    handler: src/teams/getTeam.handler
    events:
      - httpApi:
          path: /teams/{team_id}
          method: get
  #secured, owner, lead, admin 
  getTeams:
    handler: src/teams/getTeams.handler
    events:
      - httpApi:
          path: /teams
          method: get
  #secured, admin 
  createTeam:
    handler: src/teams/createTeam.handler
    events:
      - httpApi:
          path: /teams
          method: post
  #secured, admin 
  updateTeam:
    handler: src/teams/updateTeam.handler
    events:
      - httpApi:
          path: /teams/{team_id}
          method: put
  #secured, owner, lead, admin 
  getEvent:
    handler: src/events/getEvent.handler
    events:
      - httpApi:
          path: /teams/{team_id}/events/{event_id}
          method: get
  getEvents:
    handler: src/events/getEvents.handler
    events:
      - httpApi:
          path: /teams/{team_id}/events
          method: get
  getSubEvents:
    handler: src/events/getSubEvents.handler
    events:
      - httpApi:
          path: /teams/{team_id}/sub_events
          method: get
  setSubEventsAttendance:
    handler: src/events/setSubEventAttendance.handler
    events:
      - httpApi:
          path: /teams/{team_id}/sub_events_attendance/{sub_event_id}
          method: put
  deleteSubEventsAttendance:
    handler: src/events/setSubEventAttendance.remove
    events:
      - httpApi:
          path: /teams/{team_id}/sub_events_attendance/{sub_event_id}
          method: delete
  #secured, lead, admin 
  createEvent:
    handler: src/events/createEvent.handler
    events:
      - httpApi:
          path: /teams/{team_id}/events
          method: post
  #secured, lead, admin 
  updateEvent:
    handler: src/events/updateEvent.handler
    events:
      - httpApi:
          path: /teams/{team_id}/events/{event_id}
          method: put
  updateSubEvent:
    handler: src/events/updateSubEvent.handler
    events:
      - httpApi:
          path: /teams/{team_id}/sub_events/{event_id}
          method: put
  getFormTemplate:
    handler: src/forms/forms.getTemplate
    events:
      - httpApi:
          path: /forms/{form_id}
          method: get
  createReport:
    handler: src/reports/report.create
    events:
      - httpApi:
          path: /reports/{type}/{_id}
          method: post
  generateReports:
    handler: src/reports/report_new.create
    events:
      - schedule: cron(0/5 * * * ? *)
      - httpApi:
          path: /gen/reports/events
          method: get
  generateReportsMentor:
    handler: src/reports/report_new.create_for_mentors
    events:
      - schedule: cron(0 5 ? * SUN *)
      - httpApi:
          path: /gen/reports/mentor
          method: get
  getReports:
    handler: src/reports/report.gets
    events:
      - httpApi:
          path: /reports/{type}/{_id}
          method: get
  getReportsNew:
    handler: src/reports/report_new.gets
    events:
      - httpApi:
          path: /reports
          method: get
  getReport:
    handler: src/reports/report.get
    events:
      - httpApi:
          path: /reports/{type}/{_id}/{report_id}
          method: get
  updateReport:
    handler: src/reports/report_new.update
    events:
      - httpApi:
          path: /reports/{report_id}
          method: PUT
  syncEventReports:
    handler: src/reports/report_sync.sync_event_reports
    events:
      #- httpApi:
      #    path: /reports_sync/event_reports
      #    method: GET
      - schedule:
          rate: rate(5 minutes)
  syncMentorReports:
    handler: src/reports/report_sync.sync_mentor_reports
    events:
      #- httpApi:
      #    path: /reports_sync/mentor_reports
      #    method: GET
      - schedule:
          rate: rate(5 minutes)
  
plugins:
  - serverless-offline